name: üß™ Checking PR Health

on:
    pull_request:
      types: [opened, reopened, synchronize, review_requested, ready_for_review]
env:
  PYTHON-VERSION: 3.10.8
jobs:
  lint:
    name: ü´ß Linting Files
    runs-on: ubuntu-latest
    permissions:
        pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON-VERSION }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  unit-tests:
    name: üî• Launch Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: usertest
          POSTGRES_PASSWORD: passwordtest
          POSTGRES_DB: dbtest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
           python-version: ${{ env.PYTHON-VERSION }}

      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: "1.7.1"

      - name: Install dependencies
        run: |
          cd backend
          poetry install

      - name: Install tox and any other packages
        run: pip install tox

      - name: Apply migrations
        env:
          DJANGO_SETTINGS_MODULE: myapp.settings
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_ENGINE: django.db.backends.postgresql
          DB_NAME: dbtest
          DB_USER: usertest
          DB_PASSWORD: passwordtest
          DB_HOST: localhost
        run: |
          cd backend
          poetry run python manage.py migrate apicrud

      - name: Run tests with coverage
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: myapp.settings
          SQL_ENGINE: django.db.backends.postgresql
          DB_NAME: dbtest
          DB_USER: usertest
          DB_PASSWORD: passwordtest
          DB_HOST: localhost
        run: |
          cd backend
          poetry run tox

      - name: Ls backend and root
        run: |
          cd backend
          ls -a

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: coverage-report
          path: |
            backend/coverage.xml

  scan-sonar:
    name: üìà test-analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v4.1.0
        with:
          name: coverage-report
          path: backend

      - name: Adjust Paths in Coverage Report
        run: |
          sed -i 's/filename=\"/&myapp\//' backend/coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_PAT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./backend
          args: >
            -Dproject.settings=./sonar-project.properties
            -Dsonar.projectKey=OusmaneKK_interactive_portfolio
            -Dsonar.organization=drogobeats
            -Dsonar.python.coverage.reportPaths=./backend/coverage.xml
            -Dsonar.python.version=3.10
            -Dsonar.test.exclusions=**/migrations/**,**/settings.py,myapp/tests/**
            -Dsonar.exclusions=**/__init__.py,**/*.pyc



  docker:
    name: üë∑üèø Build Docker compose
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build with Docker Compose
        env:
            SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            SQL_ENGINE: django.db.backends.postgresql
            DB_NAME: dbtest
            DB_USER: usertest
            DB_PASSWORD: passwordtest
            DB_HOST: localhost
            DB_PORT: 5432
            DJANGO_ALLOWED_HOSTS: '0.0.0.0'
            ALLOWED_HOSTS: '0.0.0.0'
        run: docker-compose build
